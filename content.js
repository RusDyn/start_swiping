// Tinder Smart Swiper - Content Script (Minimal)
class SimpleTinderSwiper {
  constructor() {
    this.isRunning = false;
    this.swipeCount = 0;
    this.config = {
      apiEndpoint: 'https://your-api.com/decide', // –í–∞—à API endpoint
      maxSwipes: 200,
      userId: this.generateUserId()
    };
    
    this.stats = {
      total: 0,
      likes: 0,
      passes: 0,
      errors: 0
    };
    
    console.log('ü§ñ Simple Tinder Swiper loaded');
    this.listenForCommands();
  }

  generateUserId() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let userId = localStorage.getItem('tinderSwiper_userId');
    if (!userId) {
      userId = 'user_' + Math.random().toString(36).substr(2, 9);
      localStorage.setItem('tinderSwiper_userId', userId);
    }
    return userId;
  }

  listenForCommands() {
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
      try {
        switch (request.action) {
          case 'start':
            this.start(request.config).then(() => {
              sendResponse({ success: true });
            }).catch(error => {
              console.error('Error starting swiper:', error);
              sendResponse({ success: false, error: error.message });
            });
            return true; // –£–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
            
          case 'stop':
            this.stop();
            sendResponse({ success: true });
            break;
            
          case 'getStats':
            sendResponse(this.stats);
            break;
            
          case 'updateConfig':
            this.config = { ...this.config, ...request.config };
            sendResponse({ success: true });
            break;
            
          default:
            sendResponse({ success: false, error: 'Unknown action' });
        }
      } catch (error) {
        console.error('Error in message listener:', error);
        sendResponse({ success: false, error: error.message });
      }
    });
  }

  async start(userConfig = {}) {
    if (this.isRunning) {
      console.log('Already running');
      return;
    }

    this.config = { ...this.config, ...userConfig };
    this.isRunning = true;
    this.swipeCount = 0;
    
    console.log('üöÄ Starting simple swiper');
    await this.swipeLoop();
  }

  stop() {
    this.isRunning = false;
    console.log('‚èπÔ∏è Swiper stopped');
  }

  async swipeLoop() {
    while (this.isRunning && this.swipeCount < this.config.maxSwipes) {
      try {
        // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        const profileData = this.extractProfileData();
        
        if (!profileData) {
          console.log('‚è≥ No profile data, waiting... (checking DOM structure)');
          
          // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
          console.log('üîç DOM Analysis:');
          console.log('- URL:', window.location.href);
          console.log('- Page title:', document.title);
          
          // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
          const allPhotos = document.querySelectorAll('[style*="background-image"]');
          console.log(`- Found ${allPhotos.length} elements with background images`);
          
          if (allPhotos.length > 0) {
            console.log('- First photo element:', allPhotos[0]);
            console.log('- First photo style:', allPhotos[0].style.backgroundImage);
          }
          
          // –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
          const h1Elements = document.querySelectorAll('h1');
          console.log(`- Found ${h1Elements.length} h1 elements`);
          if (h1Elements.length > 0) {
            console.log('- H1 texts:', Array.from(h1Elements).map(h => h.textContent.trim()));
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
          const potentialCards = document.querySelectorAll('[class*="card"], [data-testid*="card"], [class*="Card"]');
          console.log(`- Found ${potentialCards.length} potential card elements`);
          
          await this.delay(5000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
          continue;
        }

        // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
        const decision = await this.requestDecision(profileData);
        
        // 3. –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–∞–π–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—à–µ–Ω–∏—è
        await this.executeSwipe(decision);
        
        // 4. –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç API
        await this.delay(decision.nextDelay || 4000);
        
        this.swipeCount++;

      } catch (error) {
        console.error('Error in swipe loop:', error);
        this.stats.errors++;
        await this.delay(5000); // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }
    
    this.stop();
  }

  extractProfileData() {
    try {
      // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Tinder
      const cardSelectors = [
        '[data-testid="gamepad-card"]',
        '.Pos\\(r\\).Expand.H\\(--recs-card-height\\)',
        '.Tcha\\(n\\).Bxsh\\(\\$bxsh-card\\)',
        '.recsCardboard__cards .Expand',
        'div[class*="StretchedBox"]'
      ];
      
      let card = null;
      let usedSelector = '';
      
      for (const selector of cardSelectors) {
        try {
          card = document.querySelector(selector);
          if (card) {
            usedSelector = selector;
            console.log(`‚úÖ Found profile card using: ${selector}`);
            break;
          }
        } catch (e) {
          continue;
        }
      }

      if (!card) {
        console.log('‚ùå No profile card found');
        return null;
      }

      // –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–Ω—É—Ç—å "Show full profile" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
      this.clickShowFullProfile(card); // –£–±–∏—Ä–∞–µ–º await - –¥–µ–ª–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–º

      // –ò—â–µ–º –∏–º—è –ø–æ itemprop="name"
      let name = 'Unknown';
      let nameEl = card.querySelector('[itemprop="name"]');
      
      if (nameEl) {
        name = nameEl.textContent.trim();
        console.log(`‚úÖ Found name: "${name}" using itemprop="name"`);
      } else {
        // Fallback —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏–º–µ–Ω–∏
        const nameSelectors = [
          '.Typs\\(display-1-strong\\)',
          'span[class*="display-1"]',
          'h1',
          '[class*="display"]'
        ];
        
        for (const selector of nameSelectors) {
          try {
            nameEl = card.querySelector(selector);
            if (nameEl && nameEl.textContent.trim()) {
              name = this.cleanName(nameEl.textContent.trim());
              console.log(`‚úÖ Found name: "${name}" using fallback ${selector}`);
              break;
            }
          } catch (e) {
            continue;
          }
        }
      }

      // –ò—â–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ itemprop="age"
      let age = null;
      const ageEl = card.querySelector('[itemprop="age"]');
      if (ageEl) {
        age = parseInt(ageEl.textContent.trim());
        console.log(`‚úÖ Found age: ${age} using itemprop="age"`);
      } else {
        // Fallback - –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
        age = this.extractAge(card.textContent);
        if (age) {
          console.log(`‚úÖ Found age: ${age} using text extraction`);
        }
      }

      // –ò—â–µ–º –±–∏–æ
      let bio = '';
      const bioSelectors = [
        '[data-testid="card-bio"]',
        '[itemprop="description"]',
        '.BreakWord',
        'div[class*="BreakWord"]',
        'div[class*="Whs(pw)"]',
        'p:not([class*="name"]):not([class*="age"])'
      ];
      
      for (const selector of bioSelectors) {
        try {
          const bioEl = card.querySelector(selector);
          if (bioEl && bioEl.textContent.trim().length > 10) {
            const text = bioEl.textContent.trim();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –∏–º—è –∏ –Ω–µ –≤–æ–∑—Ä–∞—Å—Ç
            if (!text.includes(name) && !text.match(/^\d+$/)) {
              bio = text;
              console.log(`‚úÖ Found bio: "${bio.substring(0, 50)}..." using ${selector}`);
              break;
            }
          }
        } catch (e) {
          continue;
        }
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –Ω–æ–≤—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
      const photos = this.extractPhotoUrls(card);
      
      const profileData = {
        name: name,
        bio: bio,
        photos: photos,
        photoCount: photos.length,
        age: age,
        timestamp: Date.now(),
        url: window.location.href,
        cardSelector: usedSelector
      };

      console.log('üìä Profile extracted:', {
        name: profileData.name,
        photoCount: profileData.photoCount,
        bioLength: profileData.bio.length,
        age: profileData.age,
        selector: usedSelector
      });

      // –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤–∞–ª–∏–¥–Ω—ã–º –µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –ò —Ñ–æ—Ç–æ
      if (profileData.name !== 'Unknown' && profileData.photoCount > 0) {
        return profileData;
      }

      console.log('‚ö†Ô∏è Profile data quality insufficient');
      return null;

    } catch (error) {
      console.error('Error extracting profile:', error);
      return null;
    }
  }

  extractPhotoUrls(card) {
    const photos = [];
    
    // –ò—â–µ–º –ø–æ —Ç–æ—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º –¥–ª—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª–µ–π
    const photoSelectors = [
      '[aria-label*="Profile Photo"][role="img"]',
      '.Bdrs\\(8px\\).Bgz\\(cv\\).Bgp\\(c\\).StretchedBox',
      'div[class*="StretchedBox"][role="img"]',
      '[role="img"][style*="background-image"]'
    ];
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–∏—Å–∫–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
    let photoElements = [];
    for (const selector of photoSelectors) {
      const elements = card.querySelectorAll(selector);
      if (elements.length > 0) {
        photoElements = Array.from(elements);
        console.log(`üîç Found ${elements.length} photos using selector: ${selector}`);
        break;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ, –∏—â–µ–º –ø–æ –≤—Å–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
    if (photoElements.length === 0) {
      console.log('üîç No photos in card, searching entire document...');
      for (const selector of photoSelectors) {
        const elements = document.querySelectorAll(selector);
        if (elements.length > 0) {
          photoElements = Array.from(elements);
          console.log(`üîç Found ${elements.length} photos globally using: ${selector}`);
          break;
        }
      }
    }
    
    // Fallback: –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å background-image
    if (photoElements.length === 0) {
      photoElements = Array.from(document.querySelectorAll('[style*="background-image"]'));
      console.log(`üîç Fallback: Found ${photoElements.length} elements with background-image`);
    }
    
    photoElements.forEach((el, index) => {
      let url = null;
      
      if (el.style.backgroundImage) {
        const match = el.style.backgroundImage.match(/url\(&quot;([^&]*)&quot;\)|url\("([^"]*)"\)|url\(([^)]*)\)/);
        if (match) {
          url = match[1] || match[2] || match[3];
          // –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
          url = url.replace(/&amp;/g, '&').replace(/&quot;/g, '"');
        }
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª–µ–π
      if (url && this.isValidProfilePhoto(url) && !photos.includes(url)) {
        photos.push(url);
        console.log(`üì∏ Photo ${photos.length}: ${url.substring(0, 80)}...`);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
        if (photos.length >= 10) {
          console.log('üì∏ Reached photo limit (10), stopping search');
          return;
        }
      }
    });

    console.log(`üì∏ Final result: Found ${photos.length} valid profile photos`);
    return photos;
  }

  async clickShowFullProfile(card) {
    try {
      // –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "Open Profile" –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
      const showProfileSelectors = [
        'button:has([class*="Hidden"]:contains("Open Profile"))',
        'button span.Hidden:contains("Open Profile")',
        '[aria-label*="Open Profile"]',
        '[aria-label*="Show Profile"]',
        'button[class*="focus-button-style"]:has(span:contains("Open Profile"))',
        // –ö–Ω–æ–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (i)
        'button:has(svg path[d*="M12 0c6.627"])',
        // –õ—é–±–∞—è –∫–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º "Open Profile"
        'button:has(span:contains("Open Profile"))'
      ];
      
      let showButton = null;
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ —Å "Open Profile" –≤ span.Hidden
      const buttons = document.querySelectorAll('button');
      for (const btn of buttons) {
        const hiddenSpan = btn.querySelector('span.Hidden');
        if (hiddenSpan && hiddenSpan.textContent.trim() === 'Open Profile') {
          showButton = btn;
          console.log('üîç Found "Open Profile" button by hidden span text');
          break;
        }
      }
      
      // Fallback –ø–æ–∏—Å–∫
      if (!showButton) {
        for (const selector of showProfileSelectors) {
          try {
            showButton = document.querySelector(selector);
            if (showButton) {
              console.log(`üîç Found show profile button using: ${selector}`);
              break;
            }
          } catch (e) {
            continue;
          }
        }
      }
      
      if (showButton) {
        console.log('üëÜ Clicking "Open Profile" button for more data...');
        showButton.click();
        // –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await this.delay(2000);
        console.log('‚úÖ Clicked profile button, waiting for data to load...');
      } else {
        console.log('‚ÑπÔ∏è No "Open Profile" button found, using available data');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Error clicking show profile:', error.message);
    }
  }

  isValidProfilePhoto(url) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è, –∞ –Ω–µ –∏–∫–æ–Ω–∫–∞
    if (!url || !url.startsWith('http')) return false;
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –∏–∫–æ–Ω–∫–∏ –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
    const excludePatterns = [
      '/icons/',
      '/static-assets/',
      '/descriptors/',
      'static/build/',
      '.svg',
      'icon',
      'descriptor'
    ];
    
    for (const pattern of excludePatterns) {
      if (url.includes(pattern)) {
        return false;
      }
    }
    
    // –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏–∑ Tinder CDN
    return url.includes('images-ssl.gotinder.com') || url.includes('gotinder.com/u/');
  }

  cleanName(rawName) {
    if (!rawName) return 'Unknown';
    
    // –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–∏—à–Ω–∏–µ —á–∞—Å—Ç–∏
    let cleaned = rawName
      .replace(/\d+Open Profile/gi, '') // "23Open Profile"
      .replace(/Open Profile/gi, '')     // "Open Profile"
      .replace(/\d+$/, '')               // –ß–∏—Å–ª–∞ –≤ –∫–æ–Ω—Ü–µ
      .replace(/\s+/g, ' ')              // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
      .trim();
    
    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å (–∏–º—è) –¥–æ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    const match = cleaned.match(/^([a-zA-Z√†-√ø√Ä-√ø\u0100-\u017F\s]+)/);
    if (match) {
      cleaned = match[1].trim();
    }
    
    // –ï—Å–ª–∏ –∏–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
    if (cleaned.length > 20) {
      cleaned = cleaned.split(' ')[0];
    }
    
    return cleaned || 'Unknown';
  }

  extractAge(text) {
    if (!text) return null;
    
    // –ò—â–µ–º —á–∏—Å–ª–∞ –æ—Ç 18 –¥–æ 65 (–≤–µ—Ä–æ—è—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç)
    const matches = text.match(/\b(\d{2})\b/g);
    if (matches) {
      for (const match of matches) {
        const age = parseInt(match);
        if (age >= 18 && age <= 65) {
          return age;
        }
      }
    }
    
    return null;
  }

  async requestDecision(profileData) {
    try {
      const requestPayload = {
        userId: this.config.userId,
        profile: profileData,
        swipeCount: this.swipeCount,
        stats: this.stats
      };

      console.log('üåê Requesting decision from API...');
      
      const response = await fetch(this.config.apiEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'TinderSwiper/1.0'
        },
        body: JSON.stringify(requestPayload)
      });

      if (!response.ok) {
        throw new Error(`API responded with ${response.status}`);
      }

      const decision = await response.json();
      
      console.log('üìù Decision received:', {
        action: decision.action,
        reason: decision.reason,
        confidence: decision.confidence
      });

      return decision;

    } catch (error) {
      console.error('‚ùå API request failed:', error);
      console.log('üõë Stopping swiper due to API unavailability');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–∞–π–ø–µ—Ä –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
      this.stop();
      
      return {
        action: 'stop',
        reason: 'API unavailable - stopping swiper',
        confidence: 1.0,
        nextDelay: 0
      };
    }
  }

  async executeSwipe(decision) {
    const action = decision.action?.toLowerCase();
    
    if (action === 'stop') {
      console.log('üõë Stopping swiper as requested by decision');
      this.stop();
      return;
    }
    
    if (action === 'like' || action === 'right') {
      await this.swipeRight(decision.reason);
      this.stats.likes++;
    } else if (action === 'pass' || action === 'left') {
      await this.swipeLeft(decision.reason);
      this.stats.passes++;
    } else {
      console.error('Unknown action:', decision.action);
      await this.swipeLeft('Unknown action');
      this.stats.passes++;
    }
    
    this.stats.total++;
  }

  async swipeRight(reason) {
    console.log(`‚ù§Ô∏è LIKE: ${reason}`);
    
    const likeBtn = document.querySelector('[data-testid="gamepadLikeButton"]') ||
                   document.querySelector('[aria-label="Like"]');
    
    if (likeBtn) {
      likeBtn.click();
    } else {
      // Fallback: keyboard event
      this.triggerKeyEvent('ArrowRight');
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –º–∞—Ç—á–µ–π
    setTimeout(() => this.handleModalDialogs(), 1000);
  }

  async swipeLeft(reason) {
    console.log(`üëé PASS: ${reason}`);
    
    const passBtn = document.querySelector('[data-testid="gamepadPassButton"]') ||
                   document.querySelector('[aria-label="Pass"]');
    
    if (passBtn) {
      passBtn.click();
    } else {
      // Fallback: keyboard event
      this.triggerKeyEvent('ArrowLeft');
    }
  }

  triggerKeyEvent(key) {
    document.dispatchEvent(new KeyboardEvent('keydown', {
      key: key,
      bubbles: true,
      cancelable: true
    }));
  }

  handleModalDialogs() {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –º–∞—Ç—á–µ–π, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ç.–¥.
    const modalSelectors = [
      '[data-testid="matchModal"]',
      '[role="dialog"]',
      '.modal',
      '[class*="Modal"]'
    ];

    modalSelectors.forEach(selector => {
      const modal = document.querySelector(selector);
      if (modal) {
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = modal.querySelector('[aria-label="Close"]') ||
                        modal.querySelector('[data-testid="modal-close"]') ||
                        modal.querySelector('.close') ||
                        modal.querySelector('[class*="close"]');
        
        if (closeBtn) {
          closeBtn.click();
          console.log('üóô Closed modal dialog');
        } else {
          // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç, –∫–ª–∏–∫–∞–µ–º –≤–Ω–µ –º–æ–¥–∞–ª–∞
          document.dispatchEvent(new KeyboardEvent('keydown', { key: 'Escape' }));
        }
      }
    });
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (window.location.hostname === 'tinder.com') {
  window.tinderSwiper = new SimpleTinderSwiper();
}